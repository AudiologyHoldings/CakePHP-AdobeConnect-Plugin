h1. Adobe Connect Datasource+Models Plugin for CakePHP

* "Adobe Connect":http://www.adobe.com/products/adobeconnect.html (version 7.5 tested)
* "CakePHP":http://cakephp.org (version 1.3 tested)

This CakePHP Plugin uses the "Adobe Connect API":http://help.adobe.com/en_US/AcrobatConnectPro/7.5/WebServices/
as a Datasouce and packages access to it's parts as isolated Models.

* *AdobeConnectPrincipal* - access to all Principals: users & groups
* *AdobeConnectSco* - access to all SCO items: meetings, content, folders, etc.
* *AdobeConnectPermission* - access to Permissions, reading and granting rights: meetings, content, folders, etc.
* *AdobeConnectReport* - access to all Reporting functions: meetings, content, folders, etc.

The API interaction and standard "heavy-lifting" is done in the Datasource, but the Models tie the peices together and facilitate access through normal commands and syntax.

See the unit tests for more information on how to use.

h2. Installation [--> app/plugins/adobe_connect]

If you're using git, you can include this as a submodule in your repository:
<pre><code>
    git submodule add git@github.com:zeroasterisk/CakePHP-AdobeConnect-Plugin.git app/plugins/adobe_connect
    git submodule init
    git submodule update
</code></pre>
Or you can clone the repository (but don't do this inside of another repository):
<pre><code>
    git clone git@github.com:zeroasterisk/CakePHP-AdobeConnect-Plugin.git app/plugins/adobe_connect
</code></pre>
Or you can download to:
<pre><code>
    cp CakePHP-AdobeConnect-Plugin app/plugins/adobe_connect
</code></pre>
h2. Configuration

* Option 1) Add @$adobe_connect = array()@ to your @app/config/database.php@ config file.
* Option 2) Create a file @app/config/adobe_connect_config.php@ @<?php class ADOBECONNECT_CONFIG { var $adobe_connect = array(}; } ?>@

Either way, you'll want to configure your connection like this:
<pre><code>
    var $adobe_connect = array(
        'datasource' => 'AdobeConnect.AdobeConnectSource',
        'username' => 'admin@domain.com',
        'password' => 'my-password',
        'salt' => 'my-unique-salt',
        'url' => 'http://connect.domain.com/api/xml',
        'cacheEngine' => 'default', // if you want to cache the session, reducing API calls... otherwise false
        // you may configure your root SCO ids here, if you want to
        'sco-ids' => array(
            'root' => "10000",
            'seminar-root' => "10005",
            'template-root' => "10045",
            'content-root' => "10000",
            'default-folder' => "10039",
            'default-template' => "49848",
            )
    );
</code></pre>
h2. Usage

You can specify any of the Models in your controller's $uses array:
<pre><code>
    var $uses = array('AdobeConnect.AdobeConnectSco', 'AdobeConnect.AdobeConnectPrincipal', 'AdobeConnect.AdobeConnectPermission', 'AdobeConnect.AdobeConnectReport');
</code></pre>
Or you can initialize the model, like any other Model:
<pre><code>
    if (!isset($this->AdobeConnectSco)) {
        App::import('model', 'AdobeConnect.AdobeConnectSco');
        $this->AdobeConnectSco = ClassRegistry::init('AdobeConnectSco');
        $this->AdobeConnectConfig = $this->AdobeConnectSco->config();
    }
</code></pre>
Once initilized, you can use it like any other Model.  There are several exposed custom find methods, and custom save/delete functions as well.

* @$this->AdobeConnectSco->save();@
* @$this->AdobeConnectSco->delete();@
* @$this->AdobeConnectSco->find('search', 'my meeting');@
* @$this->AdobeConnectSco->find('search', array('conditions' => array('name' => 'my meeting')));@
* @$this->AdobeConnectSco->find('search', array('conditions' => array('name' => 'my meeting', 'type' => 'meeting')));@
* @$this->AdobeConnectSco->find('search', array('conditions' => array('name' => 'my*meeting', 'type' => 'meeting')));@
* @$this->AdobeConnectSco->find('contents', 12345);@
* @$this->AdobeConnectSco->find('contents', array('sco-id' => 12345, 'conditions' => array('icon' => 'archive')));@
* @$this->AdobeConnectSco->find('searchcontent', 'welcome training');@
* @$this->AdobeConnectSco->find('searchcontent', array('query' => 'welcome training', 'conditions' => array('type' => 'content')));@
* @$this->AdobeConnectSco->find('path', $sco_id);@

There are a whole lot more, look at the test cases or the comments in the code...

h2. Thanks

Big Props to "Neil Crookes":http://www.neilcrookes.com/ and his "CakePHP-GData-Plugin":https://github.com/neilcrookes/CakePHP-GData-Plugin/ which I heard him present on at "cakefest 2010":http://tv.cakephp.org/video/CakeFoundation/2010/12/24/neil_crookes_-_designing_cakephp_plugins_for_consuming_apis

Also thanks to "Nick Baker":http://webtechnick.com/ for some debugging help.

h1. WIP
